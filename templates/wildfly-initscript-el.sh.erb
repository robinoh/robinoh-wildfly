#!/bin/sh
# WildFly standalone control script for Enterprise Linux installs.
# Note: this file is managed by Puppet.
#
# chkconfig: - 80 20
# description: WildFly Standalone
# processname: standalone
# pidfile: /var/run/wildfly/wildfly-standalone.pid
# config: /etc/wildfly/wildfly.conf

# Source function library.
. /etc/init.d/functions

# Load Java configuration.
[ -r /etc/java/java.conf ] && . /etc/java/java.conf
export JAVA_HOME

# Load WildFly init.d configuration.
if [ -z "$WILDFLY_CONF" ]; then
  WILDFLY_CONF="/etc/wildfly/wildfly.conf"
fi

[ -r "$WILDFLY_CONF" ] && . "${WILDFLY_CONF}"

# Set defaults.

if [ -z "$WILDFLY_HOME" ]; then
  WILDFLY_HOME=<%= @this_wildfly_home %>
fi
export WILDFLY_HOME

if [ -z "$WILDFLY_PIDFILE" ]; then
  WILDFLY_PIDFILE=/var/run/wildfly/wildfly-standalone.pid
fi
export WILDFLY_PIDFILE

if [ -z "$WILDFLY_CONSOLE_LOG" ]; then
  WILDFLY_CONSOLE_LOG=/var/log/wildfly/console.log
fi

if [ -z "$STARTUP_WAIT" ]; then
  STARTUP_WAIT=30
fi

if [ -z "$SHUTDOWN_WAIT" ]; then
  SHUTDOWN_WAIT=30
fi

if [ -z "$WILDFLY_CONFIG" ]; then
  WILDFLY_CONFIG=standalone.xml
fi

WILDFLY_SCRIPT=$WILDFLY_HOME/bin/standalone.sh

prog='wildfly'

CMD_PREFIX=''

if [ ! -z "$WILDFLY_USER" ]; then
  if [ -x /etc/rc.d/init.d/functions ]; then
    CMD_PREFIX="daemon --user $WILDFLY_USER"
  else
    CMD_PREFIX="su - $WILDFLY_USER -c"
  fi
fi

start() {
  echo -n "Starting $prog: "
  if [ -f $WILDFLY_PIDFILE ]; then
    read ppid < $WILDFLY_PIDFILE
    if [ `ps --pid $ppid 2> /dev/null | grep -c $ppid 2> /dev/null` -eq '1' ]; then
      echo -n "$prog is already running"
      failure
      echo
      return 1 
    else
      rm -f $WILDFLY_PIDFILE
    fi
  fi
  mkdir -p $(dirname $WILDFLY_CONSOLE_LOG)
  cat /dev/null > $WILDFLY_CONSOLE_LOG

  mkdir -p $(dirname $WILDFLY_PIDFILE)
  chown $WILDFLY_USER $(dirname $WILDFLY_PIDFILE) || true
  #$CMD_PREFIX WILDFLY_PIDFILE=$WILDFLY_PIDFILE $WILDFLY_SCRIPT 2>&1 > $WILDFLY_CONSOLE_LOG &
  #$CMD_PREFIX WILDFLY_PIDFILE=$WILDFLY_PIDFILE $WILDFLY_SCRIPT &

  if [ ! -z "$WILDFLY_USER" ]; then
    if [ -x /etc/rc.d/init.d/functions ]; then
      daemon --user $WILDFLY_USER LAUNCH_WILDFLY_IN_BACKGROUND=1 WILDFLY_PIDFILE=$WILDFLY_PIDFILE $WILDFLY_SCRIPT -c $WILDFLY_CONFIG 2>&1 > $WILDFLY_CONSOLE_LOG &
    else
      su - $WILDFLY_USER -c "LAUNCH_WILDFLY_IN_BACKGROUND=1 WILDFLY_PIDFILE=$WILDFLY_PIDFILE $WILDFLY_SCRIPT -c $WILDFLY_CONFIG" 2>&1 > $WILDFLY_CONSOLE_LOG &
    fi
  fi

  count=0
  launched=false

  until [ $count -gt $STARTUP_WAIT ]
  do
    grep 'WildFly.*started in' $WILDFLY_CONSOLE_LOG > /dev/null
    if [ $? -eq 0 ] ; then
      launched=true
      break
    fi 
    sleep 1
    let count=$count+1;
  done
  
  success
  echo
  return 0
}

stop() {
  echo -n $"Stopping $prog: "
  count=0;

  if [ -f $WILDFLY_PIDFILE ]; then
    read kpid < $WILDFLY_PIDFILE
    let kwait=$SHUTDOWN_WAIT

    # Try issuing SIGTERM

    kill -15 $kpid
    until [ `ps --pid $kpid 2> /dev/null | grep -c $kpid 2> /dev/null` -eq '0' ] || [ $count -gt $kwait ]
    do
      sleep 1
      let count=$count+1;
    done

    if [ $count -gt $kwait ]; then
      kill -9 $kpid
    fi
  fi
  rm -f $WILDFLY_PIDFILE
  success
  echo
}

status() {
  if [ -f $WILDFLY_PIDFILE ]; then
    read ppid < $WILDFLY_PIDFILE
    if [ `ps --pid $ppid 2> /dev/null | grep -c $ppid 2> /dev/null` -eq '1' ]; then
      echo "$prog is running (pid $ppid)"
      return 0
    else
      echo "$prog dead but pid file exists"
      return 1
    fi
  fi
  echo "$prog is not running"
  return 3
}

case "$1" in
  start)
      start
      ;;
  stop)
      stop
      ;;
  restart)
      $0 stop
      $0 start
      ;;
  status)
      status
      ;;
  *)
      ## If no parameters are given, print which are avaiable.
      echo "Usage: $0 {start|stop|status|restart|reload}"
      exit 1
      ;;
esac
